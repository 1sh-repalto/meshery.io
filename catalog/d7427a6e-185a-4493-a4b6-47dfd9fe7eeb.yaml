apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-storage-operator
  namespace: openshift-cluster-storage-operator
  annotations:
    include.release.openshift.io/self-managed-high-availability: "true"
    include.release.openshift.io/single-node-developer: "true"
    capability.openshift.io/name: Storage
spec:
  replicas: 1
  selector:
    matchLabels:
      name: cluster-storage-operator
  template:
    metadata:
      annotations:
        target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
      labels:
        name: cluster-storage-operator
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
      - key: node-role.kubernetes.io/master  # Just tolerate NoSchedule taint on master node. If there are other conditions like disk-pressure etc, let's not schedule the control-plane pods onto that node.
        operator: Exists
        effect: "NoSchedule"
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 120 # Evict pods within 2 mins.
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 120 # Evict pods within 2 mins.
      priorityClassName: system-cluster-critical
      serviceAccountName: cluster-storage-operator
      securityContext:
        runAsNonRoot: true
        # Force a specific UID, just in case this Pod matches a custom SCC with "runAsUser: type: runAsNonRoot".
        # The UID value was chosen by a fair `echo $RANDOM` call.
        # TODO: remove cluster-admin from the operator, then a specific UID won't be needed.
        runAsUser: 11411
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: cluster-storage-operator
          image: quay.io/openshift/origin-cluster-storage-operator:latest
          terminationMessagePolicy: FallbackToLogsOnError
          args:
          - start
          - -v=2
          ports:
          - containerPort: 8443
            name: metrics
          command:
          - cluster-storage-operator
          - start
          imagePullPolicy: IfNotPresent
          env:
          - name: OPERATOR_IMAGE_VERSION
            value: "0.0.1-snapshot"
          - name: OPERAND_IMAGE_VERSION
            value: "0.0.1-snapshot"
          - name: AWS_EBS_DRIVER_OPERATOR_IMAGE
            value: quay.io/openshift/origin-aws-ebs-csi-driver-operator:latest
          - name: AWS_EBS_DRIVER_IMAGE
            value: quay.io/openshift/origin-aws-ebs-csi-driver:latest
          - name: GCP_PD_DRIVER_OPERATOR_IMAGE
            value: quay.io/openshift/origin-gcp-pd-csi-driver-operator:latest
          - name: GCP_PD_DRIVER_IMAGE
            value: quay.io/openshift/origin-gcp-pd-csi-driver:latest
          - name: OPENSTACK_CINDER_DRIVER_OPERATOR_IMAGE
            value: quay.io/openshift/origin-openstack-cinder-csi-driver-operator:latest
          - name: OPENSTACK_CINDER_DRIVER_IMAGE
            value: quay.io/openshift/origin-openstack-cinder-csi-driver:latest
          - name: OVIRT_DRIVER_OPERATOR_IMAGE
            value: quay.io/openshift/origin-ovirt-csi-driver-operator:latest
          - name: OVIRT_DRIVER_IMAGE
            value: quay.io/openshift/origin-ovirt-csi-driver:latest
          - name: MANILA_DRIVER_OPERATOR_IMAGE
            value: quay.io/openshift/origin-csi-driver-manila-operator:latest
          - name: MANILA_DRIVER_IMAGE
            value: quay.io/openshift/origin-csi-driver-manila:latest
          - name: MANILA_NFS_DRIVER_IMAGE
            value: quay.io/openshift/origin-csi-driver-nfs:latest
          - name: PROVISIONER_IMAGE
            value: quay.io/openshift/origin-csi-external-provisioner:latest
          - name: ATTACHER_IMAGE
            value: quay.io/openshift/origin-csi-external-attacher:latest
          - name: RESIZER_IMAGE
            value: quay.io/openshift/origin-csi-external-resizer:latest
          - name: SNAPSHOTTER_IMAGE
            value: quay.io/openshift/origin-csi-external-snapshotter:latest
          - name: NODE_DRIVER_REGISTRAR_IMAGE
            value: quay.io/openshift/origin-csi-node-driver-registrar:latest
          - name: LIVENESS_PROBE_IMAGE
            value: quay.io/openshift/origin-csi-livenessprobe:latest
          - name: VSPHERE_PROBLEM_DETECTOR_OPERATOR_IMAGE
            value: quay.io/openshift/origin-vsphere-problem-detector:latest
          - name: AZURE_DISK_DRIVER_OPERATOR_IMAGE
            value: quay.io/openshift/origin-azure-disk-csi-driver-operator:latest
          - name: AZURE_DISK_DRIVER_IMAGE
            value: quay.io/openshift/origin-azure-disk-csi-driver:latest
          - name: AZURE_FILE_DRIVER_OPERATOR_IMAGE
            value: quay.io/openshift/origin-azure-file-csi-driver-operator:latest
          - name: AZURE_FILE_DRIVER_IMAGE
            value: quay.io/openshift/origin-azure-file-csi-driver:latest
          - name: KUBE_RBAC_PROXY_IMAGE
            value: quay.io/openshift/origin-kube-rbac-proxy:latest
          - name: VMWARE_VSPHERE_DRIVER_OPERATOR_IMAGE
            value: quay.io/openshift/origin-vsphere-csi-driver-operator:latest
          - name: VMWARE_VSPHERE_DRIVER_IMAGE
            value: quay.io/openshift/origin-vsphere-csi-driver:latest
          - name: VMWARE_VSPHERE_SYNCER_IMAGE
            value: quay.io/openshift/origin-vsphere-csi-driver-syncer:latest
          - name: CLUSTER_CLOUD_CONTROLLER_MANAGER_OPERATOR_IMAGE
            value: quay.io/openshift/origin-cluster-cloud-controller-manager-operator:latest
          - name: SHARED_RESOURCE_DRIVER_OPERATOR_IMAGE
            value: quay.io/openshift/origin-csi-driver-shared-resource-operator:latest
          - name: SHARED_RESOURCE_DRIVER_IMAGE
            value: quay.io/openshift/origin-csi-driver-shared-resource:latest
          - name: SHARED_RESOURCE_DRIVER_WEBHOOK_IMAGE
            value: quay.io/openshift/origin-csi-driver-shared-resource-webhook:latest
          - name: ALIBABA_DISK_DRIVER_OPERATOR_IMAGE
            value: quay.io/openshift/origin-alibaba-disk-csi-driver-operator:latest
          - name: ALIBABA_CLOUD_DRIVER_IMAGE
            value: quay.io/openshift/origin-alibaba-cloud-csi-driver:latest
          - name: IBM_VPC_BLOCK_DRIVER_OPERATOR_IMAGE
            value: quay.io/openshift/origin-ibm-vpc-block-csi-driver-operator:latest
          - name: IBM_VPC_BLOCK_DRIVER_IMAGE
            value: quay.io/openshift/origin-ibm-vpc-block-csi-driver:latest
          - name: IBM_VPC_NODE_LABEL_UPDATER_IMAGE
            value: quay.io/openshift/origin-ibm-vpc-node-label-updater:latest
          - name: POWERVS_BLOCK_CSI_DRIVER_OPERATOR_IMAGE
            value: quay.io/openshift/origin-powervs-block-csi-driver-operator:latest
          - name: POWERVS_BLOCK_CSI_DRIVER_IMAGE
            value: quay.io/openshift/origin-powervs-block-csi-driver:latest
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          volumeMounts:
            - mountPath: /var/run/secrets/serving-cert
              name: cluster-storage-operator-serving-cert
      volumes:
        - name: cluster-storage-operator-serving-cert
          secret:
            secretName: cluster-storage-operator-serving-cert
            optional: true

